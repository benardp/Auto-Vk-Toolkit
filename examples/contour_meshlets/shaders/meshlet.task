#version 460							     
#extension GL_EXT_shader_16bit_storage       : require
#extension GL_EXT_shader_8bit_storage        : require
#extension GL_EXT_mesh_shader                : require
#extension GL_EXT_nonuniform_qualifier       : require
#extension GL_GOOGLE_include_directive       : enable
#extension GL_ARB_shader_draw_parameters     : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_ballot     : require
#include "cpu_gpu_shared_config.h"
#include "glsl_helpers.glsl"
#include "mesh.glsl"

layout (constant_id = 0) const uint NUM_TASK_SHADER_INVOCATIONS = 1; // <- Expected to be set to 32 for Nvidia on host side.
//           ^  same as  v 
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

taskPayloadSharedEXT uint meshletIndices[2*NUM_TASK_SHADER_INVOCATIONS];

layout(push_constant) uniform PushConstants {
	bool mHighlightMeshlets;
	bool mCull;
	bool mContours;
	int  mVisibleMeshletIndexFrom;
	int  mVisibleMeshletIndexTo;
	uint  mNbInstances;
} pushConstants;

layout(set = 0, binding = 1) uniform CameraTransform
{
	mat4 mViewProjMatrix;
	vec3 mCameraCenter;
} ubo;

layout(set = 1, binding = 1) buffer InstanceTransforms
{
	mat4 mat[];
} instanceMatrices;

layout(set = 4, binding = 0) buffer MeshletsBuffer { extended_meshlet mValues[]; } meshletsBuffer;

void main() 
{
	if (gl_GlobalInvocationID.x >= pushConstants.mNbInstances * pushConstants.mVisibleMeshletIndexTo) {
		return;
	}

	// Calculate and set the meshlet index for this execution:
	uint groupId      = gl_WorkGroupID.x;
	uint invocationId = gl_LocalInvocationID.x;
//	uint meshletIndex = (groupId * NUM_TASK_SHADER_INVOCATIONS) / pushConstants.mNbInstances + invocationId;
//	uint instanceId   = (groupId * NUM_TASK_SHADER_INVOCATIONS) % pushConstants.mNbInstances ;
	uint instanceId = gl_GlobalInvocationID.x / pushConstants.mVisibleMeshletIndexTo;
	uint meshletIndex = gl_GlobalInvocationID.x - instanceId * pushConstants.mVisibleMeshletIndexTo;


	// See if this meshlet shall be rendered, and if so, add it to the array:
	bool meshletVisible = meshletIndex >= pushConstants.mVisibleMeshletIndexFrom && meshletIndex < pushConstants.mVisibleMeshletIndexTo;

	if(pushConstants.mCull) {
		mat4 transformationMatrix = instanceMatrices.mat[instanceId] * meshletsBuffer.mValues[meshletIndex].mTransformationMatrix;
		vec3 center = meshletsBuffer.mValues[meshletIndex].center;
		float radius = meshletsBuffer.mValues[meshletIndex].radius;
		vec3 cone_axis = meshletsBuffer.mValues[meshletIndex].coneAxis;
		float cone_cutoff = meshletsBuffer.mValues[meshletIndex].coneCutoff;

		meshletVisible = meshletVisible && !coneCull(center, radius, cone_axis, cone_cutoff, vec3(inverse(transformationMatrix) * vec4(ubo.mCameraCenter,1)));
		//meshletVisible = meshletVisible && !coneCull(vec3(transformationMatrix * vec4(center,1)), radius, mat3(transformationMatrix) * cone_axis, cone_cutoff, ubo.mCameraCenter);
	}

	uvec4 meshletVisibleBallot = subgroupBallot(meshletVisible);

	if (meshletVisible)
	{
		uint insertIndex = subgroupBallotExclusiveBitCount(meshletVisibleBallot);
		meshletIndices[2*insertIndex] = meshletIndex;
		meshletIndices[2*insertIndex+1] = instanceId;
	}

	uint  numMeshlets = subgroupBallotBitCount(meshletVisibleBallot);

	// With this number at hand, spawn the same amount of mesh shader GROUPS from this task shader:
	// I.e., in total, we spawn (numMeshlets * NUM_MESH_SHADER_INVOCATIONS * 1 * 1) invocations.
	EmitMeshTasksEXT(numMeshlets, 1, 1);
	// ^ Additional info from the VK_EXT_mesh_shader spec:
	// 
	// > The arguments are taken from the first invocation in each workgroup. Any invocation must 
	// > execute this instruction exactly once and under uniform control flow. This instruction 
	// > also serves as an OpControlBarrier instruction, and also performs and adheres to the 
	// > description and semantics of an OpControlBarrier instruction with the 'Execution' and 
	// > 'Memory' operands set to Workgroup and the 'Semantics' operand set to a combination of 
	// > WorkgroupMemory and AcquireRelease. Ceases all further processing: Only instructions 
	// > executed before OpEmitMeshTasksEXT have observable side effects.
	// > 
	// > This instruction must be the last instruction in a block.
}
